#Pascal triangle II(Leetcode)
class Solution {
public:
    vector<int> getRow(int rowIndex) 
    {
        vector<vector<int>> r(rowIndex+1);
        for(int i=0;i<=rowIndex;i++ )
        {
        r[i].resize(i+1);
        r[i][0]=r[i][i]=1;
            for(int j=1;j<i;j++)
            {
                r[i][j]=r[i-1][j-1]+r[i-1][j];
            }
        }
        return r[rowIndex];
        
            
        
    }
};
#Pascal Triangle(Leetcode)
class Solution {
public:
    vector<vector<int>> generate(int numRows)
    {
        vector<vector<int>> r(numRows);
            for(int i=0;i<numRows;i++)
            {
                r[i].resize(i+1);
                r[i][0]=r[i][i]=1;
            
        for(int j=1;j<i;j++)
        {
            r[i][j]=r[i-1][j]+r[i-1][j-1];
        }
            }
        return r;
        
        
    }
};
#Pascal triangle (GFG)
class Solution{
public:
#define MOD 1000000007
    vector<ll> nthRowOfPascalTriangle(int n) 
    {
        
        // code here
        vector<vector<ll>> r(n);
        for(int i=0;i<n;i++)
        {
            r[i].resize(i+1);
            r[i][0]=r[i][i]=1;
            for(int j=1;j<i;j++)
            {
                r[i][j]=(r[i-1][j]+r[i-1][j-1])%MOD;
            }
        }
        return r[n-1];
        
        
        
    }
    
};
